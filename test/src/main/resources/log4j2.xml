<?xml version="1.0" encoding="UTF-8"?>
<!--status属性表示log4j2日志框架内部的打印级别，比如设置为trace可以看到会打印出很多调试信息。当设置为OFF时关闭-->
<Configuration status="INFO">
    <!--自定义属性，通过${属性}来引用-->
    <Properties>
        <Property name="logDir">logs</Property>
        <Property name="pattern">%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n</Property>
    </Properties>
    <!--定义Appender-->
    <Appenders>
        <!--定义一个名称为Console的ConsoleAppender，控制台输出目标为System.out-->
        <Console name="Console" target="SYSTEM_OUT">
            <Filters>
                <!--添加过滤器ThresholdFilter,控制台只输出level及以上级别的信息 onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝-->
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
                <!-- 从大到小：error, warn, info, debug, trace -->
                <LevelRangeFilter minLevel="error" maxLevel="info" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
                <!-- 只允许在每天的 8点~8点半 之间输出日志 -->
                <TimeFilter start="08:00:00" end="08:30:00" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!--输出格式-->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!--定义一个名称为log的FileAppender,它会将日志打印到指定的文件 -->
        <!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，适合临时测试用。默认值是true -->
        <File name="file" fileName="${logDir}/file/test.log" append="false">
            <PatternLayout pattern="${pattern}"/>
        </File>

        <!--定义一个名称为rolling_file的RollingFileAppender,它会将日志打印到指定的文件并按照指定的策略进行日志滚动 -->
        <!--filePattern指定日志滚动的归档格式 -->
        <RollingFile name="rolling_file" append="true" fileName="${logDir}/rolling_file/test.log"
                     filePattern="${logDir}/rolling_file/%d{yyyy-MM}/%d{yyyy-MM-dd-hh-mm-ss}-%i.log.gz">
            <PatternLayout pattern="${pattern}"/>
            <!--配置单个Policy可以不使用Policies标签-->
            <Policies>
                <!--大小超过2MB时滚动日志-->
                <!--<SizeBasedTriggeringPolicy size="1KB"/>-->
                <!--表示每隔3s滚动一次日志-->
                <!--<CronTriggeringPolicy schedule="0/3 * * * * ?"/>-->
                <!--表示每隔3s滚动一次日志-->
                <TimeBasedTriggeringPolicy interval="3" modulate="true"/>
            </Policies>
            <!--指定日志如何滚动，DefaultRolloverStrategy只有在filePattern包含%i的占位符时才有效。max表示某个时间范围内最多保留多少个日志文件，这个时间范围与filePattern有关，
            例如，filePattern="rolling_file/%d{yyyy-MM-dd-hh}-%i.log.gz，范围表示一个小时
            例如，filePattern="rolling_file/%d{yyyy-MM-dd}-%i.log.gz，范围表示一天
            -->
            <DefaultRolloverStrategy max="7">
                <!--Delete标签用于在日志发生滚动时删除指定的日志文件。-->
                <!--basePath指定扫描文件的目录 maxDepth指定在扫描目录进行扫描的深度（实际测试没有生效）testMode为true表示实际上不删除日志，将要删除的文件在info日志中显示-->
                <Delete basePath="${logDir}/rolling_file/2020-04" maxDepth="3" testMode="false">
                    <!--下面表示文件后缀为.log.gz并且最后更新时间距离现在超过1天的日志会被删除-->
                    <IfFileName glob="*.log.gz"/>
                    <!--<IfLastModified age="1d" />-->
                    <IfLastModified age="10s"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!--定义一个名称为rolling_random_access_file的RollingRandomAccessFileAppender，它会将日志打印到指定的文件并按照指定的策略进行日志滚动-->
        <RollingRandomAccessFile name="rolling_random_access_file"
                                 fileName="${logDir}/rolling_random_access_file/test.log"
                                 filePattern="${logDir}/rolling_random_access_file/%d{yyyy-MM}/%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
                <Pattern>${pattern}</Pattern>
            </PatternLayout>
            <Policies>
                <!--日志文件大于200MB时滚动-->
                <SizeBasedTriggeringPolicy size="200MB"/>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <Filters>
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <DefaultRolloverStrategy max="6"/>
        </RollingRandomAccessFile>

        <!--可以把日志根据日志的marker或者内容动态输出到不同的目的地-->
        <Routing name="routing">
            <Routes>
                <!--此示例表示根据日志marker的内容来将日志输出RollingFile,marker相同的日志会输出到相同的文件-->
                <Script name="RoutingInit" language="JavaScript"><![CDATA[
            logEvent.getMarker()!=null? logEvent.getMarker().getName():"other"
            ]]>
                </Script>
                <!-- This route is chosen if ThreadContext has value 'special' for key ROUTINGKEY. -->
                <Route>
                    <RollingFile name="Rolling-${marker:}" fileName="${logDir}/routing/${marker:}.log"
                                 filePattern="${logDir}/routing/${date:yyyy-MM-dd}/${marker:}-%d{yyyy-MM-dd}-%i.log.gz">
                        <PatternLayout>
                            <pattern>${pattern}</pattern>
                        </PatternLayout>
                        <Policies>
                            <SizeBasedTriggeringPolicy size="1KB"/>
                        </Policies>
                    </RollingFile>
                </Route>
                <Route key="other">
                    <Console name="Console" target="SYSTEM_OUT">
                        <PatternLayout pattern="${pattern}"/>
                    </Console>
                </Route>
            </Routes>
        </Routing>

    </Appenders>
    <!--定义Logger-->
    <Loggers>
        <!--自定义Logger additivity表示日志是否输出到RootLogger-->
        <Logger name="myLogger" level="trace" additivity="false">
            <!--引用要logger要输出的目的地-->
            <!--<AppenderRef ref="Console"/>-->
        </Logger>
        <!--root是默认的logger，也就是公共的logger RootLogger 必须配置-->
        <Root level="trace">
            <!--<AppenderRef ref="Console"/>-->
            <!--<AppenderRef ref="rolling_file"/>-->
            <AppenderRef ref="routing"/>
            <!--&lt;!&ndash;定义当前Logger的过滤器，日志会先经过logger的过滤器，然后在经过appender的过滤器&ndash;&gt;-->
            <!--<Filters>-->
            <!--    &lt;!&ndash;定义一个LevelRangeFilter过滤器，日志与指定的等级范围匹配就能正常输出&ndash;&gt;-->
            <!--    <LevelRangeFilter minLevel="error" maxLevel="debug" onMatch="ACCEPT" onMismatch="DENY" />-->
            <!--</Filters>-->
        </Root>

        <!--&lt;!&ndash;异步Root logger&ndash;&gt;-->
        <!--<AsyncRoot level="WARN">-->
        <!--    <AppenderRef ref="Console" />-->
        <!--</AsyncRoot>-->
        <!--&lt;!&ndash; 异步模式 &ndash;&gt;-->
        <!--<AsyncLogger name="com.unionpay" level="INFO" includeLocation="false" additivity="false">-->
        <!--    <AppenderRef ref="Console" />-->
        <!--</AsyncLogger>-->
    </Loggers>
</Configuration>